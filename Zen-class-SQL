SQL Lesson 1: SELECT queries 101
================================

Exercise 1 — Tasks
Find the title of each film ✓
Find the director of each film ✓
Find the title and director of each film ✓
Find the title and year of each film ✓
Find all the information about each film ✓

1.SELECT title FROM movies;
2.SELECT director FROM movies;
3.SELECT title, director FROM movies;
4.SELECT title, year FROM movies;
5.SELECT * FROM movies;

SQL Lesson 2: Queries with constraints (Pt. 1)
===============================================

Exercise 2 — Tasks
Find the movie with a row id of 6 ✓
Find the movies released in the years between 2000 and 2010 ✓
Find the movies not released in the years between 2000 and 2010 ✓
Find the first 5 Pixar movies and their release year ✓

1.SELECT * FROM movies WHERE id=6;
2.SELECT * FROM movies WHERE year BETWEEN 2000 and 2010;
3.SELECT * FROM movies WHERE year not BETWEEN 2000 and 2010;
4.SELECT * FROM movies WHERE year LIMIT 5;



SQL Lesson 3: Queries with constraints (Pt. 2)
===============================================

Exercise 3 — Tasks
Find all the Toy Story movies ✓
Find all the movies directed by John Lasseter ✓
Find all the movies (and director) not directed by John Lasseter ✓
Find all the WALL-* movies ✓

1.SELECT * FROM movies WHERE Title LIKE "Toy%";
2.SELECT * FROM movies WHERE Director="John Lasseter";
3.SELECT * FROM movies WHERE Director!="John Lasseter";
4.SELECT * FROM movies WHERE Title LIKE "WALL-%";

SQL Lesson 4: Filtering and sorting Query results
=================================================

Exercise 4 — Tasks
List all directors of Pixar movies (alphabetically), without duplicates ✓
List the last four Pixar movies released (ordered from most recent to least) ✓
List the first five Pixar movies sorted alphabetically ✓
List the next five Pixar movies sorted alphabetically ✓


1.SELECT DISTINCT Director FROM movies ORDER BY director ASC;
2.SELECT * FROM movies ORDER BY Year DESC limit 4;
3.SELECT * FROM movies ORDER BY Title ASC LIMIT 5;
4.SELECT * FROM movies ORDER BY Title ASC LIMIT 5 OFFSET 5;




SQL Review 5: Simple SELECT Queries
===================================

Review 1 — Tasks
List all the Canadian cities and their populations ✓
Order all the cities in the United States by their latitude from north to south ✓
List all the cities west of Chicago, ordered from west to east ✓
List the two largest cities in Mexico (by population) ✓
List the third and fourth largest cities (by population) in the United States and their population ✓

1.SELECT * FROM north_american_cities WHERE Country="Canada";
2.SELECT * FROM north_american_cities WHERE Country="United States" ORDER BY Latitude DESC;
3.SELECT city, longitude FROM north_american_cities WHERE longitude < -87.629798 ORDER BY longitude ASC;
4.SELECT * FROM north_american_cities WHERE Country="Mexico" ORDER BY Population DESC LIMIT 2;
5.SELECT * FROM north_american_cities WHERE Country="United States" ORDER BY Population DESC LIMIT 2 OFFSET 2;



SQL Lesson 6: Multi-table queries with JOINs
=============================================

Exercise 6 — Tasks
Find the domestic and international sales for each movie ✓
Show the sales numbers for each movie that did better internationally rather than domestically ✓
List all the movies by their ratings in descending order ✓

1.SELECT * FROM movies as m INNER JOIN Boxoffice as b ON m.Id = b.Movie_id;
2.SELECT * FROM movies as m INNER JOIN Boxoffice as b ON m.Id = b.Movie_id WHERE International_sales>Domestic_sales;
3.SELECT * FROM movies as m INNER JOIN Boxoffice as b ON m.Id = b.Movie_id ORDER BY rating DESC;



SQL Lesson 7: OUTER JOINs
==========================

Exercise 7 — Tasks
Find the list of all buildings that have employees ✓
Find the list of all buildings and their capacity ✓
List all buildings and the distinct employee roles in each building (including empty buildings) ✓

1.SELECT distinct Building_name FROM Buildings as b INNER JOIN Employees as e ON b.Building_name = e.building;
2.SELECT * FROM Buildings;
3.SELECT DISTINCT building_name, role FROM buildings LEFT JOIN employees ON building_name = building;


SQL Lesson 8: A short note on NULLs
===================================

Exercise 8 — Tasks
Find the name and role of all employees who have not been assigned to a building ✓
Find the names of the buildings that hold no employees ✓


1.SELECT * FROM employees WHERE Building IS NULL;
2.SELECT * FROM Buildings LEFT JOIN Employees ON Buildings.Building_name=Employees.Building WHERE Name is NULL; 


SQL Lesson 9: Queries with expressions
=======================================

Exercise 9 — Tasks
List all movies and their combined sales in millions of dollars ✓
List all movies and their ratings in percent ✓
List all movies that were released on even number years ✓

1.SELECT title, (domestic_sales + international_sales) / 1000000 as total_sales FROM movies INNER JOIN boxoffice ON movies.id = boxoffice.movie_id;
2.SELECT title, rating*10 as rating_percent FROM movies INNER JOIN boxoffice ON movies.id = boxoffice.movie_id;
3.SELECT title FROM movies INNER JOIN boxoffice ON movies.id = boxoffice.movie_id WHERE Year%2=0;

SQL Lesson 10: Queries with aggregates (Pt. 1)
=================================================
Exercise 10 — Tasks
Find the longest time that an employee has been at the studio ✓
For each role, find the average number of years employed by employees in that role ✓
Find the total number of employee years worked in each building ✓

1.SELECT max(Years_employed) FROM employees;
2.SELECT Role, AVG(Years_employed) FROM employees GROUP BY Role;
3.SELECT building, SUM(Years_employed) FROM employees GROUP BY Building;


SQL Lesson 11: Queries with aggregates (Pt. 2)
==============================================

Exercise 11 — Tasks
Find the number of Artists in the studio (without a HAVING clause) ✓
Find the number of Employees of each role in the studio ✓
Find the total number of years employed by all Engineers ✓


1.SELECT count() FROM employees WHERE Role="Artist";
2.SELECT Role, count() FROM employees GROUP BY Role;
3.SELECT SUM(Years_employed) FROM employees WHERE Role="Engineer";

SQL Lesson 12: Order of execution of a Query
=============================================

Exercise 12 — Tasks
Find the number of movies each director has directed ✓
Find the total domestic and international sales that can be attributed to each director ✓

1.SELECT director, count()  FROM movies GROUP BY Director;
2.SELECT director, SUM(Domestic_sales+International_sales) FROM movies INNER JOIN Boxoffice ON movies.id=Boxoffice.Movie_id GROUP BY Director;



SQL Lesson 13: Inserting rows
=============================

Exercise 13 — Tasks
Add the studio's new production, Toy Story 4 to the list of movies (you can use any director) ✓
Toy Story 4 has been released to critical acclaim! It had a rating of 8.7, and made 340 million domestically and 270 million internationally. Add the record to the BoxOffice table.

1.INSERT INTO movies VALUES (7, "Toy Story 4", "MadhanKumar", 2020, 120);
2.INSERT INTO boxoffice VALUES (4, 8.7, 340000000, 270000000);


SQL Lesson 14: Updating rows
=============================

Exercise 14 — Tasks
The director for A Bug's Life is incorrect, it was actually directed by John Lasseter ✓
The year that Toy Story 2 was released is incorrect, it was actually released in 1999 ✓
Both the title and director for Toy Story 8 is incorrect! The title should be "Toy Story 3" and it was directed by Lee Unkrich ✓


1.UPDATE movies SET director = "John Lasseter" WHERE id=2;
2.UPDATE movies SET year=1999 WHERE id=3;
3.UPDATE movies SET title="Toy Story 3", director="Lee Unkrich" WHERE id=11;


SQL Lesson 15: Deleting rows
=============================

Exercise 15 — Tasks
This database is getting too big, lets remove all movies that were released before 2005. ✓
Andrew Stanton has also left the studio, so please remove all movies directed by him. ✓

1.DELETE FROM movies where year<2005;
2.DELETE FROM movies where director="Andrew Stanton";


SQL Lesson 16: Creating tables
==============================

Exercise 16 — Tasks
Create a new table named Database with the following columns:
– Name A string (text) describing the name of the database
– Version A number (floating point) of the latest version of this database
– Download_count An integer count of the number of times this database was downloaded
This table has no constraints. ✓

1.CREATE TABLE Database(Name TEXT, Version FLOAT, Download_count INTEGER);

SQL Lesson 17: Altering tables
===============================

Exercise 17 — Tasks
Add a column named Aspect_ratio with a FLOAT data type to store the aspect-ratio each movie was released in. ✓
Add another column named Language with a TEXT data type to store the language that the movie was released in. Ensure that the default for this language is English. ✓


1.ALTER TABLE Movies ADD COLUMN Aspect_ratio FLOAT DEFAULT 2.39;
2.ALTER TABLE Movies ADD COLUMN Aspect_ratio FLOAT DEFAULT 2.39;

SQL Lesson 18: Dropping tables
==============================

Exercise 18 — Tasks
We've sadly reached the end of our lessons, lets clean up by removing the Movies table ✓
And drop the BoxOffice table as well ✓

1.DROP TABLE Movies;
2.DROP TABLE BoxOffice;
